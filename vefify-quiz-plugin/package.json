{
  "deployment": {
    "composer.json": {
      "name": "vefify/quiz-plugin",
      "description": "Advanced quiz campaign management with mobile-first design",
      "type": "wordpress-plugin",
      "version": "1.0.0",
      "require": {
        "php": ">=7.4",
        "composer/installers": "^1.0"
      },
      "require-dev": {
        "phpunit/phpunit": "^9.0",
        "wp-coding-standards/wpcs": "^2.3",
        "phpstan/phpstan": "^1.0"
      },
      "autoload": {
        "psr-4": {
          "VefifyQuiz\\": "includes/"
        }
      },
      "scripts": {
        "test": "phpunit",
        "cs": "phpcs --standard=WordPress .",
        "analyze": "phpstan analyze includes/"
      },
      "extra": {
        "installer-name": "vefify-quiz-plugin"
      }
    },
    
    "package.json": {
      "name": "vefify-quiz-plugin",
      "version": "1.0.0",
      "description": "Frontend build tools for Vefify Quiz Plugin",
      "scripts": {
        "dev": "webpack --mode development --watch",
        "build": "webpack --mode production",
        "lint": "eslint frontend/assets/js/**/*.js",
        "compress": "gulp compress"
      },
      "devDependencies": {
        "webpack": "^5.0.0",
        "webpack-cli": "^4.0.0",
        "css-loader": "^6.0.0",
        "mini-css-extract-plugin": "^2.0.0",
        "eslint": "^8.0.0",
        "gulp": "^4.0.0",
        "gulp-zip": "^5.0.0",
        "gulp-clean": "^0.4.0"
      }
    },

    "webpack.config.js": {
      "entry": {
        "quiz": "./frontend/assets/js/quiz.js",
        "admin": "./admin/assets/js/admin.js"
      },
      "output": {
        "path": "path.resolve(__dirname, 'dist')",
        "filename": "[name].bundle.js"
      },
      "module": {
        "rules": [
          {
            "test": "/\\.css$/",
            "use": ["MiniCssExtractPlugin.loader", "css-loader"]
          },
          {
            "test": "/\\.js$/",
            "exclude": "/node_modules/",
            "use": {
              "loader": "babel-loader",
              "options": {
                "presets": ["@babel/preset-env"]
              }
            }
          }
        ]
      },
      "plugins": [
        "new MiniCssExtractPlugin({filename: '[name].bundle.css'})"
      ]
    }
  },

  "production_optimization": {
    "database_indexes": [
      "CREATE INDEX idx_campaign_active ON vefify_campaigns(is_active, start_date, end_date);",
      "CREATE INDEX idx_user_phone ON vefify_quiz_users(phone_number);", 
      "CREATE INDEX idx_user_campaign ON vefify_quiz_users(campaign_id, completed_at);",
      "CREATE INDEX idx_session_lookup ON vefify_quiz_sessions(session_id, is_completed);",
      "CREATE INDEX idx_analytics_campaign ON vefify_analytics(campaign_id, event_type, created_at);",
      "CREATE INDEX idx_gift_score_range ON vefify_gifts(campaign_id, min_score, max_score);"
    ],

    "caching_strategy": {
      "object_cache": {
        "campaigns": "1 hour",
        "questions": "30 minutes", 
        "gifts": "15 minutes",
        "analytics": "5 minutes"
      },
      "page_cache": {
        "quiz_pages": "no-cache",
        "admin_pages": "no-cache",
        "api_endpoints": "5 minutes"
      },
      "database_cache": {
        "question_performance": "1 hour",
        "campaign_stats": "15 minutes",
        "gift_inventory": "5 minutes"
      }
    },

    "security_hardening": {
      "api_rate_limiting": {
        "check_participation": "10 requests per minute per IP",
        "start_quiz": "5 requests per minute per IP", 
        "submit_quiz": "3 requests per minute per IP"
      },
      "input_validation": {
        "phone_format": "Vietnamese phone number regex",
        "name_length": "max 255 characters",
        "province_whitelist": "predefined list only"
      },
      "data_encryption": {
        "sensitive_fields": ["phone_number", "email"],
        "method": "WordPress encryption functions"
      }
    },

    "monitoring": {
      "error_tracking": {
        "failed_quiz_submissions": "log to error.log",
        "api_failures": "log with context",
        "database_errors": "immediate notification"
      },
      "performance_metrics": {
        "quiz_completion_time": "track average",
        "api_response_time": "monitor endpoints",
        "database_query_time": "slow query log"
      },
      "user_analytics": {
        "participation_rates": "daily reports", 
        "score_distributions": "weekly analysis",
        "device_breakdown": "mobile vs desktop"
      }
    }
  },

  "deployment_scripts": {
    "gulpfile.js": "const gulp = require('gulp');\nconst zip = require('gulp-zip');\nconst clean = require('gulp-clean');\n\n// Clean dist folder\ngulp.task('clean', () => {\n  return gulp.src('dist/*', {read: false})\n    .pipe(clean());\n});\n\n// Copy plugin files\ngulp.task('copy', () => {\n  return gulp.src([\n    '**/*',\n    '!node_modules/**',\n    '!tests/**',\n    '!.git/**',\n    '!gulpfile.js',\n    '!package*.json',\n    '!webpack.config.js'\n  ])\n  .pipe(gulp.dest('dist/vefify-quiz-plugin/'));\n});\n\n// Create zip file\ngulp.task('compress', gulp.series('clean', 'copy', () => {\n  return gulp.src('dist/vefify-quiz-plugin/**')\n    .pipe(zip('vefify-quiz-plugin.zip'))\n    .pipe(gulp.dest('dist/'));\n}));\n\ngulp.task('default', gulp.series('compress'));",

    "deploy.sh": "#!/bin/bash\n\n# Vefify Quiz Plugin Deployment Script\n\nset -e\n\necho \"Starting deployment process...\"\n\n# Build frontend assets\necho \"Building frontend assets...\"\nnpm run build\n\n# Run tests\necho \"Running tests...\"\ncomposer test\n\n# Code quality checks\necho \"Running code quality checks...\"\ncomposer cs\ncomposer analyze\n\n# Create plugin zip\necho \"Creating plugin package...\"\ngulp compress\n\n# Database migration check\necho \"Checking database migrations...\"\nphp -f scripts/check-migrations.php\n\n# Backup current version (if updating)\nif [ \"$1\" = \"update\" ]; then\n  echo \"Creating backup...\"\n  php -f scripts/backup-database.php\nfi\n\n# Deploy to staging\nif [ \"$1\" = \"staging\" ]; then\n  echo \"Deploying to staging...\"\n  rsync -avz dist/vefify-quiz-plugin/ staging@server:/var/www/staging/wp-content/plugins/vefify-quiz-plugin/\n  ssh staging@server \"cd /var/www/staging && wp plugin activate vefify-quiz-plugin\"\nfi\n\n# Deploy to production\nif [ \"$1\" = \"production\" ]; then\n  echo \"Deploying to production...\"\n  read -p \"Are you sure you want to deploy to production? (y/N) \" -n 1 -r\n  echo\n  if [[ $REPLY =~ ^[Yy]$ ]]; then\n    rsync -avz dist/vefify-quiz-plugin/ production@server:/var/www/html/wp-content/plugins/vefify-quiz-plugin/\n    ssh production@server \"cd /var/www/html && wp plugin activate vefify-quiz-plugin\"\n    echo \"Production deployment complete!\"\n  fi\nfi\n\necho \"Deployment process completed!\"",

    "backup-database.php": "<?php\n/**\n * Database Backup Script\n */\n\nrequire_once dirname(__FILE__) . '/../wp-config.php';\n\n$tables = [\n    'vefify_campaigns',\n    'vefify_questions', \n    'vefify_question_options',\n    'vefify_gifts',\n    'vefify_quiz_users',\n    'vefify_quiz_sessions',\n    'vefify_analytics'\n];\n\n$backup_dir = dirname(__FILE__) . '/backups/';\nif (!is_dir($backup_dir)) {\n    mkdir($backup_dir, 0755, true);\n}\n\n$backup_file = $backup_dir . 'vefify_backup_' . date('Y-m-d_H-i-s') . '.sql';\n\n$mysqldump_cmd = sprintf(\n    'mysqldump -h%s -u%s -p%s %s %s > %s',\n    DB_HOST,\n    DB_USER, \n    DB_PASSWORD,\n    DB_NAME,\n    implode(' ', array_map(function($table) {\n        return DB_TABLE_PREFIX . $table;\n    }, $tables)),\n    $backup_file\n);\n\nexec($mysqldump_cmd, $output, $return_code);\n\nif ($return_code === 0) {\n    echo \"Backup created successfully: $backup_file\\n\";\n    \n    // Keep only last 10 backups\n    $backups = glob($backup_dir . 'vefify_backup_*.sql');\n    if (count($backups) > 10) {\n        array_multisort(array_map('filemtime', $backups), SORT_NUMERIC, SORT_DESC, $backups);\n        foreach (array_slice($backups, 10) as $old_backup) {\n            unlink($old_backup);\n            echo \"Removed old backup: $old_backup\\n\";\n        }\n    }\n} else {\n    echo \"Backup failed with code: $return_code\\n\";\n    exit(1);\n}"
  },

  "performance_config": {
    "wp-config.php_additions": "// Vefify Quiz Plugin Performance Settings\ndefine('VEFIFY_QUIZ_CACHE_ENABLED', true);\ndefine('VEFIFY_QUIZ_CACHE_DURATION', 3600);\ndefine('VEFIFY_QUIZ_DB_OPTIMIZE', true);\ndefine('VEFIFY_QUIZ_DEBUG_LOG', false);",

    "htaccess_rules": "# Vefify Quiz Plugin Optimizations\n\n# Cache static assets\n<IfModule mod_expires.c>\n  ExpiresByType text/css \"access plus 1 year\"\n  ExpiresByType application/javascript \"access plus 1 year\"\n  ExpiresByType image/png \"access plus 1 year\"\n  ExpiresByType image/jpg \"access plus 1 year\"\n  ExpiresByType image/jpeg \"access plus 1 year\"\n</IfModule>\n\n# Compress assets\n<IfModule mod_deflate.c>\n  AddOutputFilterByType DEFLATE text/css\n  AddOutputFilterByType DEFLATE application/javascript\n  AddOutputFilterByType DEFLATE application/json\n</IfModule>\n\n# Security headers\n<IfModule mod_headers.c>\n  Header always set X-Content-Type-Options nosniff\n  Header always set X-Frame-Options DENY\n  Header always set X-XSS-Protection \"1; mode=block\"\n</IfModule>",

    "database_optimization": {
      "cleanup_sessions": "DELETE FROM vefify_quiz_sessions WHERE created_at < DATE_SUB(NOW(), INTERVAL 30 DAY) AND is_completed = 0;",
      "cleanup_analytics": "DELETE FROM vefify_analytics WHERE created_at < DATE_SUB(NOW(), INTERVAL 90 DAY);",
      "optimize_tables": "OPTIMIZE TABLE vefify_campaigns, vefify_questions, vefify_quiz_users, vefify_analytics;"
    }
  },

  "testing_suite": {
    "phpunit.xml": "<?xml version=\"1.0\"?>\n<phpunit bootstrap=\"tests/bootstrap.php\">\n  <testsuites>\n    <testsuite name=\"VefifyQuiz\">\n      <directory>tests/unit/</directory>\n      <directory>tests/integration/</directory>\n    </testsuite>\n  </testsuites>\n  <filter>\n    <whitelist>\n      <directory suffix=\".php\">includes/</directory>\n      <directory suffix=\".php\">modules/</directory>\n    </whitelist>\n  </filter>\n</phpunit>",

    "sample_test": "<?php\n/**\n * Sample Unit Test\n * File: tests/unit/CampaignManagerTest.php\n */\n\nuse PHPUnit\\Framework\\TestCase;\nuse VefifyQuiz\\CampaignManager;\n\nclass CampaignManagerTest extends TestCase {\n    private $campaign_manager;\n    \n    protected function setUp(): void {\n        $this->campaign_manager = new CampaignManager();\n    }\n    \n    public function testGetCampaigns() {\n        $result = $this->campaign_manager->get_campaigns();\n        $this->assertIsArray($result);\n        $this->assertArrayHasKey('success', $result);\n        $this->assertTrue($result['success']);\n    }\n    \n    public function testCreateCampaign() {\n        $data = [\n            'name' => 'Test Campaign',\n            'slug' => 'test-campaign',\n            'description' => 'Test description',\n            'start_date' => '2024-01-01 00:00:00',\n            'end_date' => '2024-12-31 23:59:59',\n            'questions_per_quiz' => 5,\n            'pass_score' => 3\n        ];\n        \n        $result = $this->campaign_manager->create_campaign($data);\n        $this->assertIsNumeric($result);\n        $this->assertGreaterThan(0, $result);\n    }\n}"
  },

  "monitoring_config": {
    "error_logging": "<?php\n/**\n * Enhanced Error Logging\n * File: includes/class-logger.php\n */\n\nnamespace VefifyQuiz;\n\nclass Logger {\n    private static $log_file;\n    \n    public static function init() {\n        self::$log_file = WP_CONTENT_DIR . '/debug/vefify-quiz.log';\n        \n        if (!is_dir(dirname(self::$log_file))) {\n            wp_mkdir_p(dirname(self::$log_file));\n        }\n    }\n    \n    public static function log($level, $message, $context = []) {\n        if (!defined('VEFIFY_QUIZ_DEBUG_LOG') || !VEFIFY_QUIZ_DEBUG_LOG) {\n            return;\n        }\n        \n        $timestamp = current_time('Y-m-d H:i:s');\n        $context_str = !empty($context) ? ' | Context: ' . json_encode($context) : '';\n        $log_entry = \"[{$timestamp}] {$level}: {$message}{$context_str}\" . PHP_EOL;\n        \n        error_log($log_entry, 3, self::$log_file);\n        \n        // Rotate log file if too large\n        if (file_exists(self::$log_file) && filesize(self::$log_file) > 10 * 1024 * 1024) {\n            rename(self::$log_file, self::$log_file . '.old');\n        }\n    }\n    \n    public static function error($message, $context = []) {\n        self::log('ERROR', $message, $context);\n    }\n    \n    public static function warning($message, $context = []) {\n        self::log('WARNING', $message, $context);\n    }\n    \n    public static function info($message, $context = []) {\n        self::log('INFO', $message, $context);\n    }\n}",

    "health_check": "<?php\n/**\n * Health Check Endpoint\n * File: api/health-check.php\n */\n\nadd_action('rest_api_init', function() {\n    register_rest_route('vefify/v1', '/health', [\n        'methods' => 'GET',\n        'callback' => 'vefify_health_check',\n        'permission_callback' => '__return_true'\n    ]);\n});\n\nfunction vefify_health_check() {\n    global $wpdb;\n    \n    $health = [\n        'status' => 'healthy',\n        'timestamp' => current_time('c'),\n        'version' => VEFIFY_QUIZ_VERSION,\n        'checks' => []\n    ];\n    \n    // Database connectivity\n    try {\n        $wpdb->get_var('SELECT 1');\n        $health['checks']['database'] = 'ok';\n    } catch (Exception $e) {\n        $health['checks']['database'] = 'error';\n        $health['status'] = 'unhealthy';\n    }\n    \n    // Table existence\n    $required_tables = ['campaigns', 'questions', 'quiz_users', 'gifts'];\n    $missing_tables = [];\n    \n    foreach ($required_tables as $table) {\n        $table_name = $wpdb->prefix . 'vefify_' . $table;\n        if ($wpdb->get_var(\"SHOW TABLES LIKE '$table_name'\") !== $table_name) {\n            $missing_tables[] = $table;\n        }\n    }\n    \n    if (empty($missing_tables)) {\n        $health['checks']['tables'] = 'ok';\n    } else {\n        $health['checks']['tables'] = 'missing: ' . implode(', ', $missing_tables);\n        $health['status'] = 'unhealthy';\n    }\n    \n    // File permissions\n    $upload_dir = wp_upload_dir();\n    if (is_writable($upload_dir['basedir'])) {\n        $health['checks']['file_permissions'] = 'ok';\n    } else {\n        $health['checks']['file_permissions'] = 'upload directory not writable';\n        $health['status'] = 'degraded';\n    }\n    \n    // Memory usage\n    $memory_limit = ini_get('memory_limit');\n    $memory_usage = memory_get_usage(true);\n    $health['checks']['memory'] = [\n        'limit' => $memory_limit,\n        'usage' => size_format($memory_usage),\n        'percentage' => round(($memory_usage / wp_convert_hr_to_bytes($memory_limit)) * 100, 2)\n    ];\n    \n    return rest_ensure_response($health);\n}"
  }
}